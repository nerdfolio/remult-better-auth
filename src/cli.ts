import { writeFile } from "node:fs/promises"
import { setTimeout } from "node:timers/promises"
import type { BetterAuthOptions } from "better-auth"
import { Remult } from "remult"
import { remultAdapter } from "./remult-ba"

export async function generateRemultSchema({ options, file }: { options: BetterAuthOptions; file: string }) {
	const adapter = remultAdapter(new Remult(), {
		authEntities: {},
	})(options)

	if (!adapter.createSchema) {
		throw new Error(`Adapter "${adapter.id}" does not support createSchema`)
	}

	const { code, path, overwrite } = await adapter.createSchema(options, file)

	const genTimestamp = (() => {
		const ts = new Date()
		return `${ts.toISOString()} | ${ts.toLocaleString("en-US", { timeZone: "America/Los_Angeles", timeZoneName: "short" })}`
	})()

	const pre = ['//'.repeat(10), `// GENERATED by remult-better-auth. ${genTimestamp}`, '//'.repeat(10)].join('\n')
	const post = ['', '//'.repeat(10), `// END GENERATED by remult-better-auth. ${genTimestamp}`, '//'.repeat(10)].join('\n')

	const content = [overwrite ? pre : `\n${pre}`, code, post].join("\n")
	return writeFile(path, content, { encoding: "utf-8", flag: overwrite ? "w+" : "a" })
}

async function main() {
	await setTimeout(1) // so that all the node import warnings get printed first

	const defaultFile = "./auth-schema.ts"

	const [command, file = defaultFile] = process.argv.slice(2)
	if (command !== "generate") {
		throw new Error(
			`Unknown command: ${command}. Only "generate out-file" is supported. If out-file is not specified, it defaults to "${defaultFile}"`
		)
	}

	await generateRemultSchema({ options: {}, file })
}

main()
